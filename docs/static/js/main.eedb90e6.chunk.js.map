{"version":3,"sources":["components/CategoryAdd.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAqCeA,EAlCK,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAkBzC,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAO,OACPC,MAAUT,EACVU,SAnBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAApBJ,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAGnC,OADAc,QAAQC,IAAI,CAACN,KAAGC,QAAMV,QAElB,sBAAKgB,UAAY,2CAAjB,UACI,kCAAKN,EAAL,OACA,qBAAKO,IAAQjB,EAAMkB,IAAQR,QC2BxBS,EA/BC,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAXAC,qBAAW,WACP1B,EAAQC,GACH0B,MAAK,SAAAC,GACFX,QAAQC,IAAIU,GACZH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAGtB,CAACtB,IAEGuB,EDdwBK,CAAa5B,GAAhCa,EAFkB,EAEvBN,KAAae,EAFU,EAEVA,QAWpB,OATAN,QAAQC,IAAIK,GAUR,qCACI,qBAAIJ,UAAU,sCAAd,cAAsDlB,EAAtD,OACCsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAFhB,IAGI,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAI,SAAAC,GAAG,OACV,aADgB,CACf,EAAD,eAEQA,GADIA,EAAIC,aErB3BkB,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,gBAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAI9B,OACI,gCACI,uEACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBACA,6BAEQ6C,EAAWrB,KAAM,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEIA,SAAYA,GADLA,Y,MCZnC+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.eedb90e6.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CategoryAdd = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value)\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        \r\n        if ( inputValue.trim().length > 2) {\r\n            setCategories( cat => [inputValue, ...cat]);\r\n            setInputValue('')\r\n        }\r\n    }\r\n  \r\n    return (\r\n        <form onSubmit = { handleSubmit } >\r\n            <input \r\n                type = \"text\"\r\n                value = { inputValue }\r\n                onChange = { handleInputChange }\r\n            />\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nCategoryAdd.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CategoryAdd\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=XlZYwPi5t43rgCwr4xGKPcVMalSIghQu`; //encodeURI -> la categoria puede tener espacios,etc y lo q hace es reemplazar esos espacios por signos para q se lea bien la url\r\n     \r\n    const resp = await fetch(url)\r\n    const { data } = await resp.json()\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n    //No regresa los gifs, regresa una promesa que resuelve la coleccion de mis imagenes\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id,title,url} ) => {   \r\n// console.log(id, title, url)\r\n    console.log({id,title,url})\r\n    return (\r\n        <div className = \"card animate__animated animate__backInUp\">\r\n            <p> {title} </p>\r\n            <img src = { url } alt = { title } />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nconst GifGrid = ( {category} ) => {\r\n\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    //data:iamges -> renombramos data a images, para usarlo en este funcional component.\r\n    console.log(loading)\r\n\r\n    // useEffect( () => { //solo quiero que ejecute la funcion getGifs() cuando el componente es renderizado por primera vez\r\n    //     getGifs(category) //es el Fetch de la carpeta \"helpers\"\r\n    //         .then(setImages) // es lo mismo que esto-> .then(imgs => setImages(imgs))\r\n    // }, [category]) //Quiero que se dispare el getGif (la peticion Fetch) solo si la category cambia.\r\n    \r\n    // //TODO: (no lo entendi bien) clase -> 77.Helpers getGifs, min: 6:00 - Es lo utlimo que vi - 10/01/2021\r\n    \r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__backInUp\"> {category} </h3>\r\n            {loading && <p className=\"animate__animated animate__swing\">Loading</p>} {/*Es lo mismo que esto: {loading ? <p>Loading</p> : null} (si es false, no hace nada) */}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => ( //Cuando ponemos parensesis es un return implicito, si ponemos llaves hay q poner el \"return\r\n                        <GifGridItem \r\n                            key = { img.id } // declaramos la propiedad key\r\n                            {...img} //le enviamos al component GifGridItem el id, title, img\r\n                        />        \r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => { //solo quiero que ejecute la funcion getGifs() cuando el componente es renderizado por primera vez //Los UseEffect no peuden ser Async, xq esperan algo sincrono.\r\n        getGifs(category) //es el Fetch de la carpeta \"helpers\"\r\n            .then(imgs => {\r\n                console.log(imgs)\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                })    \r\n            }) // es lo mismo que esto-> .then(imgs => setImages(imgs))\r\n    }, [category])\r\n\r\n    return state; //{data:[], loading:true}\r\n}","import React, {useState} from 'react'\r\nimport CategoryAdd from './components/CategoryAdd'\r\nimport GifGrid from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Dragon Ball'])\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertApp - Aplicacion de GIFÂ´s</h2>\r\n            <CategoryAdd setCategories = { setCategories } />\r\n            <hr/>\r\n            <ol>\r\n                {\r\n                    categories.map ( category => (\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category = {category}\r\n                         />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}